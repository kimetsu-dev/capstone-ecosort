/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst } from 'workbox-strategies';

// 🚀 VERSION CONTROL - Increment this on each deployment
const CACHE_VERSION = 'v1.0.3'; // 👈 UPDATE THIS ON EVERY DEPLOY

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: `images-${CACHE_VERSION}`,
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Cache other image formats
registerRoute(
  ({ url }) => url.origin === self.location.origin && /\.(jpg|jpeg|gif|svg|webp)$/.test(url.pathname),
  new StaleWhileRevalidate({
    cacheName: `images-${CACHE_VERSION}`,
    plugins: [
      new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 30 * 24 * 60 * 60 }), // 30 days
    ],
  })
);

// Cache CSS and JS files with Network First strategy
registerRoute(
  ({ url }) => url.origin === self.location.origin && /\.(css|js)$/.test(url.pathname),
  new NetworkFirst({
    cacheName: `static-resources-${CACHE_VERSION}`,
    plugins: [
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Cache Google Fonts
registerRoute(
  ({ url }) => url.origin === 'https://fonts.googleapis.com' || url.origin === 'https://fonts.gstatic.com',
  new StaleWhileRevalidate({
    cacheName: `google-fonts-${CACHE_VERSION}`,
    plugins: [
      new ExpirationPlugin({ maxEntries: 20, maxAgeSeconds: 365 * 24 * 60 * 60 }), // 1 year
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('⏭️ Skipping waiting phase...');
    self.skipWaiting();
  }
});

// Clean up old caches on activation
self.addEventListener('activate', (event) => {
  console.log(`🔄 Service Worker ${CACHE_VERSION} activating...`);
  
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          // Delete caches that don't match current version
          if (!cacheName.includes(CACHE_VERSION) && 
              (cacheName.startsWith('images-') || 
               cacheName.startsWith('static-resources-') || 
               cacheName.startsWith('google-fonts-'))) {
            console.log('🗑️ Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('✅ Service Worker activated and old caches cleaned');
      return self.clients.claim();
    })
  );
});

// Log when service worker is installed
self.addEventListener('install', (event) => {
  console.log(`📦 Service Worker ${CACHE_VERSION} installing...`);
  // Force the waiting service worker to become the active service worker
  self.skipWaiting();
});

// Send version info to clients
self.addEventListener('fetch', (event) => {
  // Add version header to responses (for debugging)
  if (event.request.url.includes(self.location.origin)) {
    event.respondWith(
      fetch(event.request).then((response) => {
        const clonedResponse = response.clone();
        const headers = new Headers(clonedResponse.headers);
        headers.append('X-SW-Version', CACHE_VERSION);
        
        return new Response(clonedResponse.body, {
          status: clonedResponse.status,
          statusText: clonedResponse.statusText,
          headers: headers
        });
      }).catch(() => {
        // If fetch fails, try to serve from cache
        return caches.match(event.request);
      })
    );
  }
});

// Any other custom service worker logic can go here.
console.log(`🚀 EcoSort Service Worker ${CACHE_VERSION} loaded`);